#######################################################################
#                      C# Snippets for UltiSnips                      #
#######################################################################
# https://github.com/honza/vim-snippets
# priority -50
#
# #########################
# #  classes and structs  #
# #########################
#
# snippet namespace "namespace" b
# namespace ${1:MyNamespace}
# {
# 	${VISUAL}$0
# }
# endsnippet
#
# snippet class "class" w
# public class ${1:`!v expand('%:t:r')`} 
# {
# 	$2
# }
# endsnippet
#
# snippet struct "struct" w
# struct ${1:MyStruct}
# {
# 	$2
# }
# endsnippet
#
# snippet interface "interface" w
# interface ${1:`!v expand('%:t:r')`} 
# {
# 	$2
# }
# endsnippet
#
# snippet enum "enumeration" b
# enum ${1:MyEnum} { ${2:Item} };
# endsnippet
#
#
# ############
# #  Main()  #
# ############
#
# snippet main "static int main" b
# static int Main(string[] args)
# {
# 	$0
# }
# endsnippet
#
# snippet mainv "static void main" b
# static void Main(string[] args)
# {
# 	$0
# }
# endsnippet
#
#
# ################
# #  properties  #
# ################
#
# snippet prop "Simple property declaration" b
# public ${1:int} ${2} { get; set; }
# endsnippet
#
# snippet propfull "Full property declaration" b
# private ${1:int} ${2:_myProperty};
#
# public ${1:int} $3
# {
# 	get { return $2; }
# 	set { $2 = value; }
# }
# endsnippet
#
# snippet propg "Property with a private setter" b
# public ${1:int} ${2:MyProperty} { get; private set; }
# endsnippet
#
#
# ############
# #  blocks  #
# ############
#
# snippet #if "#if #endif" b
# #if ${1:DEBUG}
# ${VISUAL}$0
# #endif
# endsnippet
#
#
# ###########
# #  loops  #
# ###########
#
# snippet for "for loop" b
# for (int ${1:i} = 0; $1 < ${2:10}; $1++)
# {
# 	${VISUAL}$0
# }
# endsnippet
#
# snippet foreach "foreach loop" b
# foreach (${3:var} ${2:item} in ${1:items})
# {
# 	${VISUAL}$0
# }
# endsnippet
#
# snippet while "while loop" b
# while (${1:true})
# {
# 	${VISUAL}$0
# }
# endsnippet
#
# snippet do "do loop" b
# do
# {
# 	${VISUAL}$0
# } while (${1:true});
# endsnippet
#
#
# ###############
# #  branching  #
# ###############
#
# snippet if "if statement" b
# if ($1)
# {
# 	${VISUAL}$0
# }
# endsnippet
#
# snippet ife "if else statement" b
# if ($1)
# {
# 	${VISUAL}$0
# }
# else
# {
# }
# endsnippet
#
# snippet switch "switch statement" b
# switch (${1:statement})
# {
# 	case ${2:value}:
# 		break;
#
# 	default:
# 		$0break;
# }
# endsnippet
#
# ##############
# #  wrappers  #
# ##############
#
# snippet using "using statement" b
# using (${1:resource})
# {
# 	${VISUAL}$0
# }
# endsnippet
#
# ########################
# #  exception handling  #
# ########################
#
# snippet try "try catch block" b
# try
# {
# 	${VISUAL}$0
# }
# catch (${1:Exception} ${2:e})
# {
# 	throw;
# }
# endsnippet
#
# snippet tryf "try finally block" b
# try
# {
# 	${VISUAL}$0
# }
# finally
# {
# }
# endsnippet
#
# snippet throw "throw"
# throw new $1Exception("$2");
# endsnippet
#
# ############################
# #  feedback and debugging  #
# ############################
#
# snippet da "Debug.Assert" b
# Debug.Assert(${1:true});
# endsnippet
#
# snippet cw "Console.WriteLine" b
# Console.WriteLine("$1");
# endsnippet
#
# snippet cr "Console.ReadLine" b
# Console.ReadLine();
# endsnippet
#
# # as you first type comma-separated parameters on the right, {n} values appear in the format string
# snippet cwp "Console.WriteLine with parameters" b
# Console.WriteLine("${2:`!p
# snip.rv = ' '.join(['{' + str(i) + '}' for i in range(t[1].count(','))])
# `}"${1:, something});
# endsnippet
#
#
# #############
# #  methods  #
# #############
#
# snippet equals "Equals method" b
# public override bool Equals(object obj)
# {
# 	if (obj == null || GetType() != obj.GetType())
# 	{
# 		return false;
# 	}
# 	$0
# 	return base.Equals(obj);
# }
# endsnippet
#
# snippet mth "Method" b
# ${1:public} ${2:void} ${3:MyMethod}(${4})
# {
# 	$0
# }
# endsnippet
#
# ###############
# # constructor #
# ###############
#
# snippet ctor "Constructor" b
# ${1:public} ${2:`!p snip.rv = snip.basename or "untitled"`}(${3})
# {
# 	$0
# }
# endsnippet
#
# # Additional CSharp Snippets for Testing
# # xunit tests
# snippet xfact
# 	[Fact]
# 	public void ${1}()
# 	{
# 		${0}
# 	}
# endsnippet
# # xunit attributes
# snippet xtrait
# 	[Trait("${0}", "true")]
# # xunit assertions
# snippet xequal
# 	Assert.Equal(${1}, ${0});
# endsnippet
# snippet xequal!
# 	Assert.NotEqual(${1}, ${0});
# snippet xsame
#
# 	Assert.Same(${1}, ${0});
# endsnippet
# snippet xsame!
# 	Assert.NotSame(${1}, ${0});
# endsnippet
# snippet xcontains
# 	Assert.Contains(${1}, ${0});
# endsnippet
# snippet xcontains!
# 	Assert.DoesNotContain(${1}, ${0});
# endsnippet
# snippet xthrow
# 	Assert.Throws<${1}>(() => ${0});
# endsnippet
# snippet xthrow!
# 	Assert.DoesNotThrow(() => ${0});
# endsnippet
# snippet xrange
# 	Assert.InRange(${1}, ${2}, ${0});
# endsnippet
# snippet xrange!
# 	Assert.NotInRange(${1}, ${2}, ${0});
# endsnippet
# snippet xfrom
# 	Assert.IsAssignableFrom<${1}>(${0});
# endsnippet
# snippet xtype
# 	Assert.IsType<${1}>(${0});
# endsnippet
# snippet xtype!
# 	Assert.IsNotType<${1}>(${0});
# endsnippet
# snippet xempty
# 	Assert.Empty(${0});
# endsnippet
# snippet xempty!
# 	Assert.NotEmpty(${0});
# endsnippet
# snippet xnull
# 	Assert.Null(${0});
# endsnippet
# snippet xnull!
# 	Assert.NotNull(${0});
# endsnippet
# snippet xtrue
# 	Assert.True(${0});
# endsnippet
# snippet xfalse
# 	Assert.False(${0});
# endsnippet
# snippet xtrue!
# 	Assert.False(${0});
# endsnippet
