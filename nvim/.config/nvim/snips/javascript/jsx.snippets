# React & JSX
snippet rrcc "React Redux Class Component" b
import React, { Component} from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

class ${1:`!v expand('%:t:r')`} extends Component {

	render() {
		return (
			<div>$2</div>
		);
	}
}

$1.propTypes = {
	$3
};

const mapStateToProps = state => {
	return {};
}

const mapDispatchToProps =  {
	action,
};

export default connect(mapStateToProps, mapDispatchToProps)($1);
endsnippet

snippet rcc "React Class Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';

class ${1:`!v expand('%:t:r')`} extends Component {

	render() {
		return (
			<div>$2</div>
		);
	}
}

$1.propTypes = {
	$3
};

export default $1;
endsnippet

snippet rfc "React Functional Component" b
import React from 'react';
import PropTypes from 'prop-types';

const ${1:`!v expand('%:t:r')`} = (${3:props}) => {
	return (
		<div className={styles.base}>
			$4
		</div>
	);
}

$1.defaultProps = {};

$1.propTypes = {};

export default $1;
endsnippet

snippet rsc "React Styled Component" b
import styled from 'styled-components';

const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`
	$3
\`;

endsnippet

snippet sets "Set State"
this.setState({
	${1}: ${2}
});
endsnippet

snippet tp "this.props" i
this.props.${1}
endsnippet

snippet ts "this.state" i
this.state.${1}
endsnippet

# Component Lifecycle
snippet cwm "Component Will Mount" b
componentWillMount() {
	$1
}
endsnippet

snippet cdm "Component Did Mount" b
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "Component Will Receive Props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scup "Should Component Update" b
shouldComponentUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cwup "Component Will Update" b
componentWillUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdup "Component Did Update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwu "Component Will Unmount" b
componentWillUnmount() {
	$1
}
endsnippet

# PropTypes

snippet  pti "import PropTypes" w
import PropTypes from 'prop-types';
endsnippet

snippet  pt "propTypes" w
${1:component}.propTypes = {
}
endsnippet

snippet  dp "default props" w
${1:component}.defaultProps = {
}
endsnippet

snippet   pt.b "PropTypes Boolean" w
PropTypes.bool
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object
endsnippet

snippet pt.s "PropType String" w
PropTypes.string
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf($2)
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([$2])
endsnippet

snippet pt.ar "PropTypes arrayOf" w
PropTypes.arrayOf($1)
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf($1),
endsnippet

snippet pt.sh "PropTypes Shape" w
PropTypes.shape({
	$2
}),
endsnippet
